datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  MEMBER
  ADMIN
}

enum UserType {
  INDIVIDUAL
  ORGANIZATION
}

enum OrganizationType {
  NGO
  BUSINESS
  CHARITY
  OTHER
}

enum ItemCategory {
  EWASTE
  PLASTIC
  STATIONARY
  CLOTHES
  FURNITURE
  FOOD
  OTHER
}

enum ItemStatus {
  AVAILABLE
  PENDING
  DONATED
  RESERVED
}

enum DocumentType {
  REGISTRATION_CERTIFICATE
  NATIONAL_ID
}

enum PickupStatus {
  PENDING
  APPROVED
  COMPLETED
  REJECTED
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String?
  phoneNumber      String? // New field for user's phone number
  profileImage     String?
  clerkUserId      String?           @unique
  role             UserRole          @default(MEMBER)
  userType         UserType?         @default(INDIVIDUAL) // Differentiates between individuals and organizations
  organizationType OrganizationType? // Specifies the type of organization (if applicable)

  producedListings ItemListing[]   @relation("ProducedListings")
  receivedListings ItemListing[]   @relation("ReceivedListings")
  pickupRequests   PickupRequest[]
  accountDetails   AccountDetails?
  accountDetailsId String?

  verificationDocument VerificationDocument?
  workshops            Workshop[]
  donations            Donation[]
  ratings              Rating[] // New relation to the Rating model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationDocument {
  id           String       @id @default(cuid())
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id])
  documentType DocumentType
  documentUrl  String[] // Array of URLs to uploaded documents
  verified     Boolean      @default(false) // Individual document verification status
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model AccountDetails {
  id              String @id @default(cuid())
  bankName        String
  accountNumber   String
  ifscCode        String
  beneficiaryName String
  description     String // Description of how funds will be used for social causes

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model ItemListing {
  id          String       @id @default(cuid())
  title       String
  description String
  category    ItemCategory

  latitude  Float?
  longitude Float?
  address   String?

  status ItemStatus @default(AVAILABLE)

  producer   User   @relation("ProducedListings", fields: [producerId], references: [id])
  producerId String

  receiver   User?   @relation("ReceivedListings", fields: [receiverId], references: [id])
  receiverId String?

  pickupRequests PickupRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workshop   Workshop? @relation(fields: [workshopId], references: [id])
  workshopId String?

  // Relations to category-specific models
  eWaste     EWaste?
  plastic    Plastic?
  stationary Stationary?
  clothes    Clothes?
  furniture  Furniture?
  food       Food?
  other      Other?
}

model Other {
  id        String   @id @default(cuid())
  details   String[]
  condition String
  images    String[]
  donate    Boolean
  amount    Int?

  itemId      String      @unique
  itemListing ItemListing @relation(fields: [itemId], references: [id])
}

model EWaste {
  id        String   @id @default(cuid())
  brand     String
  model     String
  condition String
  warranty  Boolean
  quantity  Float
  images    String[]
  donated   Boolean
  amount    Int?

  itemId      String      @unique
  itemListing ItemListing @relation(fields: [itemId], references: [id])
}

model Plastic {
  id         String   @id @default(cuid())
  type       String // e.g., PET, HDPE, etc.
  weight     Float // In kilograms
  recyclable Boolean
  images     String[]
  donated    Boolean
  amount     Int?

  itemId      String      @unique
  itemListing ItemListing @relation(fields: [itemId], references: [id])
}

model Stationary {
  id       String   @id @default(cuid())
  type     String // e.g., pens, notebooks, etc.
  quantity Int
  new      Boolean
  images   String[]
  donate   Boolean
  amount   Int?

  itemId      String      @unique
  itemListing ItemListing @relation(fields: [itemId], references: [id])
}

model Clothes {
  id        String   @id @default(cuid())
  size      String
  gender    String // e.g., men, women, unisex
  material  String
  condition String
  quantity  Int
  images    String[]
  donate    Boolean
  amount    Int?

  itemId      String      @unique
  itemListing ItemListing @relation(fields: [itemId], references: [id])
}

model Furniture {
  id         String   @id @default(cuid())
  type       String // e.g., chair, table, etc.
  material   String
  condition  String
  dimensions String
  images     String[]
  donate     Boolean
  amount     Int?

  itemId      String      @unique
  itemListing ItemListing @relation(fields: [itemId], references: [id])
}

model Food {
  id         String   @id @default(cuid())
  type       String // e.g., perishable, non-perishable
  expiryDate DateTime
  weight     Float // In kilograms
  images     String[]
  donate     Boolean
  amount     Int?

  itemId      String      @unique
  itemListing ItemListing @relation(fields: [itemId], references: [id])
}

model PickupRequest {
  id            String       @id @default(cuid())
  scheduledDate DateTime
  status        PickupStatus
  utilization   String? // How the donated items will be used

  itemListing   ItemListing @relation(fields: [itemListingId], references: [id])
  itemListingId String

  requester   User   @relation(fields: [requesterId], references: [id])
  requesterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id     String  @id @default(cuid())
  amount Decimal @db.Decimal(10, 2)

  donor   User   @relation(fields: [donorId], references: [id])
  donorId String

  workshop   Workshop? @relation(fields: [workshopId], references: [id])
  workshopId String?

  createdAt DateTime @default(now())
}

model Workshop {
  id          String   @id @default(cuid())
  title       String // Title of the workshop
  description String // Detailed description of the workshop
  aim         String // Aim or goal of the workshop
  solution    String // Solution proposed or outcomes expected from the workshop
  images      String[] // Event images URLs

  openForDonations Boolean @default(false) // Indicates if the workshop is open for donations
  donationDetails  String? // Details about how donations will be used (if openForDonations = true)

  startDate DateTime // Start date of the workshop
  endDate   DateTime // End date of the workshop
  location  String? // Location of the workshop (optional for online events)

  organizer   User   @relation(fields: [organizerId], references: [id])
  organizerId String // Reference to the User (organization)

  item      ItemListing[]
  donations Donation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id       String @id @default(cuid())
  value    Int // Rating value (e.g., 1-5)
  feedback String // Feedback text from the user

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
